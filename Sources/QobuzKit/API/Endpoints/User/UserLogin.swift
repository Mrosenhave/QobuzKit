//
//  UserLogin.swift
//  QobuzKit
//
//  Created by Markus Rosenhave on 23/02/2025.
//

import Foundation

extension QobuzAPI.Endpoints {
  /**
   Login a customer.
   
   When you logged a Qobuz account for the first time on a device, you have to put the
   device_manufacturer_id in parameters of the login method.
   Because it will return to you the device_id. And this device_id is necessary to report streaming with the
   following two endpoints: **TrackReportStreamingStart** & **TrackReportStreamingEnd**.
   
   How to get the device_manufacturer_id : It is an unique id generated by the client's application with datas
   got in the device. When you do not find any datas, you can generate a random id, but it has to be unique.
   Here an exemple of a device_manufacturer_id : 6922031-0352-59D3-ADA2-B8E98226E8F0
   For your information, this parameters hires_purchases_streaming, means that the user will be or not able
   to stream in Hi-Res his Hi-Res albums purchased.
   
   - Parameter username: The user login or email
   - Parameter password: The users password (This is encrypted automatically before sending request)
   - Parameter deviceManufacturerId: ID generated by the client's application with data from the device
   - Parameter deviceModel: The device model
   - Parameter deviceOsVersion: The device OS version
   - Parameter devicePlatform: The device platform
   - Parameter extra: Extra desired information
   - Parameter sessionId: The session id
   
   ## Authentication
   Requires a valid app_id.
   
   
   - Returns: A QBUserLogin object. Includes the **user auth token**.
  */
  public struct UserLogin: Endpoint {
    public init(
      username: String,
      password: String,
      deviceManufacturerId: String? = nil,
      deviceModel: String? = nil,
      deviceOsVersion: String? = nil,
      devicePlatform: String? = nil,
      extra: userLoginExtra? = nil,
      sessionId: String? = nil
    ) {
      self.parameters = [.init(name: QobuzAPI.Parameters.username(), value: username)]
      let hashedPassword = self.calculateMD5Hash(for: password)
      self.parameters.append(.init(name: QobuzAPI.Parameters.password(), value: hashedPassword))
      
      if let deviceManufacturerId {
        self.parameters.append(.init(name: QobuzAPI.Parameters.deviceManufacturerId(), value: deviceManufacturerId))
      }
      
      if let deviceModel {
        self.parameters.append(.init(name: QobuzAPI.Parameters.deviceModel(), value: deviceModel))
      }
      
      if let deviceOsVersion {
        self.parameters.append(.init(name: QobuzAPI.Parameters.deviceOsVersion(), value: deviceOsVersion))
      }
      
      if let devicePlatform {
        self.parameters.append(.init(name: QobuzAPI.Parameters.devicePlatform(), value: devicePlatform))
      }
      
      if let extra {
        self.parameters.append(.init(name: QobuzAPI.Parameters.extra(), value: extra.rawValue))
      }
      
      if let sessionId {
        self.parameters.append(.init(name: QobuzAPI.Parameters.sessionId(), value: sessionId))
      }
    }

    public typealias Response = QBUserLogin

    public let path: String = "user/login"

    public var parameters: [URLQueryItem]
    
    public enum userLoginExtra: String {
      case partner
    }
  }
}
